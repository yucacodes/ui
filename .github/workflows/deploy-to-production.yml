name: Deploy to Production
on:
  push:
    branches: ['master']
jobs:
  check-versions:
    name: Check Versions
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.versions.outputs.published }}
      package: ${{ steps.versions.outputs.package }}
    steps:
      - uses: actions/setup-node@v4
        name: Setup Node.js
      - uses: actions/checkout@v4.1.1
        name: Checkout
      - id: versions
        name: Query versions
        run: |
          PUBLISHED_VERSION=$(npm view @yucacodes/ui version)
          PACKAGE_VERSION=$(cat package.json | jq -r '.version')
          echo "PUBLISHED_VERSION=$PUBLISHED_VERSION"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION"
          echo "published=$PUBLISHED_VERSION" >> "$GITHUB_OUTPUT"
          echo "package=$PACKAGE_VERSION" >> "$GITHUB_OUTPUT"

  publish-react-lib:
    name: Publish React Lib
    needs: check-versions
    runs-on: ubuntu-latest
    if: ${{ needs.check-versions.outputs.published != needs.check-versions.outputs.package }}
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      - name: Setup Node.js
        uses: actions/setup-node@v4
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Run publish
        run: |
          VERSION_TO_PUBLISH=${{ needs.check-versions.outputs.package }}
          NPM_TOKEN=${{ secrets.NPM_TOKEN }}

          bun install
          bun run build:lib.react
          
          cat package.react.json \
            | jq ". += {\"version\": \"$VERSION_TO_PUBLISH\"}" \
            > package.json
          
          npm set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
          npm publish --access=public

  build-docs:
    name: Build Docs App
    needs: publish-react-lib
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ steps.image.outputs.repository }}
      tag: ${{ steps.image.outputs.tag }}
      image: ${{ steps.image.outputs.image }}
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: yucacodes
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: image
        name: Docker Image Tag
        run: |
          REPOSITORY=yucacodes/ui-front
          TAG=${{ github.sha }}
          IMAGE=$REPOSITORY:$TAG

          echo "repository=$REPOSITORY" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Build and push images
        uses: docker/build-push-action@v5.1.0
        with:
          tags: ${{ steps.image.outputs.image }}
          push: true
          target: front

  deploy-docs:
    name: Deploy Docs App
    needs: build-docs
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ui.yuca.codes
          username: deployer
          key: ${{ secrets.DEPLOYER_USER_KEY }}
          script: |
            DOMAIN=ui.yuca.codes
            REPOSITORY=${{ needs.build-docs.outputs.repository }}
            TAG=${{ needs.build-docs.outputs.tag }}
            IMAGE=${{ needs.build-docs.outputs.image }}

            docker run -d --restart=unless-stopped \
              -e VIRTUAL_HOST=$DOMAIN \
              -e LETSENCRYPT_HOST=$DOMAIN \
              $IMAGE

            CONTAINERS_TO_STOP=$( \
              docker ps --format '{{.ID}} {{.Image}}' \
              | grep $REPOSITORY \
              | grep -v $TAG \
              | awk '{ print $1 }' \
            )

            for C in $CONTAINERS_TO_STOP; do docker kill $C; done;
            for C in $CONTAINERS_TO_STOP; do docker rm $C; done;
            docker image prune --all --force
